<?php

namespace app\Nova;

use Illuminate\Support\Facades\Auth;
use Illuminate\Validation\Rules;
use Laravel\Nova\Fields\Boolean;
use Laravel\Nova\Fields\BooleanGroup;
use Laravel\Nova\Fields\Heading;
use Laravel\Nova\Fields\Hidden;
use Laravel\Nova\Fields\ID;
use Laravel\Nova\Fields\Password;
use Laravel\Nova\Fields\Text;
use Laravel\Nova\Http\Requests\NovaRequest;

class Admin extends Resource
{
    /**
     * The model the resource corresponds to.
     *
     * @var class-string<\app\Models\Admin>
     */
    public static $model = \app\Models\Admin::class;

    /**
     * The single value that should be used to represent the resource when being displayed.
     *
     * @var string
     */
    public static $title = 'name';

    /**
     * The columns that should be searched.
     *
     * @var array
     */
    public static $search = [
        'id', 'name', 'email',
    ];

    public static function indexQuery(NovaRequest $request, $query)
    {
        $query->where('role_admin', 1);

        if (empty($request->get('orderBy'))) {
            $query->getQuery()->orders = [];

            return $query->orderBy('id', 'desc');
        }

        return $query;
    }

    /**
     * Get the fields displayed by the resource.
     *
     * @return array
     */
    public function fields(NovaRequest $request)
    {
        $booleanOptions = [
            User::uriKey() => User::label(),
        ];

        return [
            ID::make()->sortable(),

            Text::make('Name')
                ->sortable()
                ->rules('required', 'max:255'),

            Text::make('Email')
                ->sortable()
                ->rules('required', 'email', 'max:254')
                ->creationRules('unique:users,email')
                ->updateRules('unique:users,email,{{resourceId}}'),

            Password::make('Password')
                ->onlyOnForms()
                ->creationRules('required', Rules\Password::defaults())
                ->updateRules('nullable', Rules\Password::defaults()),

            Boolean::make('Super admin', 'super_admin')->showOnDetail(function (NovaRequest $request, $resource) {
                return true;
            })->showOnCreating(function (NovaRequest $request) {
                return Auth::id() == 1 || auth()->user()->super_admin;
            })->showOnUpdating(function (NovaRequest $request, $resource) {
                return (Auth::id() == 1 || auth()->user()->super_admin) && ($resource->id != auth()->id());
            }),

            BooleanGroup::make('Reader', 'reader')->noValueText('Full access')->exceptOnForms()->options(function () use ($booleanOptions) {
                return $this->super_admin ? null : $booleanOptions;
            }),

            BooleanGroup::make('Editor', 'editor')->noValueText('Full access')->exceptOnForms()->options(function () use ($booleanOptions) {
                return $this->super_admin ? null : $booleanOptions;
            }),

            BooleanGroup::make('Reader', 'reader')->options($booleanOptions)->onlyOnForms()
                ->showOnCreating(function (NovaRequest $request) {
                    return Auth::id() == 1 || auth()->user()->super_admin;
                })->showOnUpdating(function (NovaRequest $request, $resource) {
                    return (Auth::id() == 1 || auth()->user()->super_admin) && ($resource->id != auth()->id());
                }),

            BooleanGroup::make('Editor', 'editor')->options($booleanOptions)->onlyOnForms()
                ->showOnCreating(function (NovaRequest $request) {
                    return Auth::id() == 1 || auth()->user()->super_admin;
                })->showOnUpdating(function (NovaRequest $request, $resource) {
                    return (Auth::id() == 1 || auth()->user()->super_admin) && ($resource->id != auth()->id());
                }),

            Heading::make('It\'s an account of the main administrator of the website. It\'s not permitted to change any rules for this account.')->showOnDetail(function (NovaRequest $request, $resource) {
                return $resource->id == 1;
            })->showOnCreating(function (NovaRequest $request) {
                return false;
            })->showOnUpdating(function (NovaRequest $request, $resource) {
                return $resource->id == 1;
            }),

            Hidden::make('role_admin', 'role_admin')->default(true),
        ];
    }

    public static function label()
    {
        return __('Administrators');
    }
}
